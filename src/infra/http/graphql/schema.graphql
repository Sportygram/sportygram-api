### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthOutput implements MutationOutput {
  accessToken: String
  message: String!
  refreshToken: String
  user: User!
}

type ChatData {
  streamUserId: String!
  token: String
}

enum ChatUserRoleType {
  admin
  channel_member
  channel_moderator
  user
}

type CheckUsernameOutput implements MutationOutput {
  available: Boolean!
  message: String!
}

type Country {
  code: String!
  emoji: String!
  name: String!
}

"""A country code as defined by ISO 3166-1 alpha-2"""
scalar CountryCode

type CreateRoomOutput implements MutationOutput {
  message: String!
  room: Room!
}

type Cursor {
  next: String
  prev: String
}

interface CursorPaginationOutput {
  cursor: Cursor!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type Fixture {
  date: DateTime!
  fixtureId: ID
  misc: JSON!
  periods: [Int!]
  predictions: [Prediction]
  scores: JSON
  teams: TeamData!
  venue: String
}

type Game {
  createdAt: DateTime
  data: JSON!
  description: String
  expiringAt: DateTime
  gameId: ID!
  gameType: GameType!
  leaderBoard: [GamePlayer]!
  name: String!
  roomId: ID!
  updatedAt: DateTime
}

type GamePlayer {
  playerId: ID!
  score: Float!
  username: String!
}

enum GameType {
  DAILY
  SEASON
  WEEKLY
}

"""
A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.
"""
scalar IPv4

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  emailOrUsername: String!
  ip: IPv4
  password: String!
}

type MatchStatistic {
  type: String
  value: String
}

type MatchStatus {
  long: String
  short: String
  timeElapsed: Int
}

type Mutation {
  changePassword(newPassword: String!, oldPassword: String): AuthOutput!
  checkUsername(username: String!): CheckUsernameOutput!
  createRoom(description: String, name: String!, roomType: String): CreateRoomOutput!
  joinRoom(roomId: String!): CreateRoomOutput!
  login(input: LoginInput!): AuthOutput!
  logout: Boolean!
  predictMatch(input: PredictionInput!): PredictionOutput!
  resetPassword(password: String!, token: String!, userId: String!): AuthOutput!
  sendEmailVerification(email: String!): TokenSendOutput!
  sendPasswordReset(email: String!): TokenSendOutput!
  signup(email: String!, password: String, referralCode: String): AuthOutput!
  syncFirebaseUser(referralCode: String, token: String!): AuthOutput!
  updateChatUserRole(role: ChatUserRoleType!, roomId: String!): CreateRoomOutput!
  updatePrediction(input: PredictionInput!): PredictionOutput!
  updateRoom(input: UpdateRoomInput!): CreateRoomOutput!
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfileOutput!
  verifyEmail(token: String!): AuthOutput!
}

interface MutationOutput {
  message: String!
}

interface PaginatedInput {
  """Number of items per page"""
  limit: Int
  page: Int
}

type Pagination {
  limit: Int
  page: Int
  pages: Int
  total: Int
}

interface PaginationOutput {
  pagination: Pagination!
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Prediction {
  fixtureId: String!
  prediction: JSON!
  predictionId: ID!
  predictionType: String!
}

input PredictionInput {
  fixtureId: String!
  prediction: JSON!
  predictionId: String
  predictionType: String!
}

type PredictionOutput implements MutationOutput {
  message: String!
  prediction: Prediction!
}

type Query {
  countries: [Country]!
  fixtures(date: String!): [Fixture!]!
  room(roomId: String!): Room!
  teams: [Team]!
  viewer: User!
}

type Room {
  createdAt: DateTime!
  description: String
  games: [Game]
  id: ID!
  joiningFee: Float!
  name: String!
  roomImageUrl: String
  roomType: RoomType!
  updatedAt: DateTime!
}

enum RoomType {
  private
  public
}

type Team {
  code: ID
  logo: String
  name: String
  score: String
  stadium: String
  statistics: [MatchStatistic]
  winner: Boolean
}

type TeamData {
  away: Team
  home: Team
}

type TokenSendOutput implements MutationOutput {
  message: String!
  sent: Boolean!
}

input UpdateRoomInput {
  description: String
  name: String
  roomId: String!
}

input UpdateUserProfileInput {
  country: String
  favoriteTeam: String
  firstname: String
  lastname: String
  onboarded: Boolean
  phone: String
  profileColour: String
  username: String
}

type UpdateUserProfileOutput implements MutationOutput {
  message: String!
  user: User!
}

type User {
  chatData: ChatData
  coinBalance: Float!
  country: String
  createdAt: DateTime!
  email: EmailAddress!
  emailVerified: Boolean!
  favoriteTeam: String
  firstname: String
  gamesSummary: JSON
  lastname: String
  onboarded: Boolean!
  phone: PhoneNumber
  profileColour: String!
  profileImageUrl: String!
  referralCode: String!
  referralCount: Int!
  roles: [String]!
  settings: JSON
  updatedAt: DateTime!
  userId: ID!
  userState: String!
  username: String
}

enum sort {
  ASC
  DESC
}