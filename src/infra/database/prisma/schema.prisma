// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// TODO Singularize all related model names

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id              String           @id @db.Uuid
  name            String           @unique
  description     String
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  rolePermissions RolePermission[]
  roleUsers       UserRole[]

  @@map("roles")
}

enum AccessMode {
  create
  read
  update
  delete
  edit
}

model RolePermission {
  roleId       String     @map("role_id") @db.Uuid
  permissionId String     @map("permission_id") @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime?  @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")

  @@unique([roleId, permissionId], map: "role_id_permission_id_unique")
  @@map("roles_permissions")
}

model Permission {
  id              String           @id @db.Uuid
  accessMode      AccessMode       @map("access_mode")
  description     String
  resource        String
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  permissionRoles RolePermission[]

  @@map("permissions")
}

enum UserState {
  active
  inactive
  deleted
}

model User {
  id            String       @id @db.Uuid
  email         String?      @unique @db.VarChar(254)
  username      String?      @unique @db.VarChar(30)
  phone         String?      @unique @db.VarChar(30)
  firstname     String?      @db.VarChar(30)
  lastname      String?      @db.VarChar(30)
  country       String?      @db.VarChar(2)
  referrer      String?      @db.Uuid
  referralCode  String       @unique @map("referral_code")
  passwordHash  String       @map("password_hash")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  lastLoginIp   String?      @map("last_login_ip") @db.Inet
  lastLoginTime DateTime?    @map("last_login_time")
  userState     UserState    @default(active) @map("user_state")
  profile       UserProfile?
  tokens        Token[]
  userRoles     UserRole[]
  metadata      Json         @default("{}")

  @@map("users")
}

model UserRole {
  roleId    String    @map("role_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  role      Role      @relation(fields: [roleId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([roleId, userId], map: "role_id_user_id_unique")
  @@map("users_roles")
}

model UserProfile {
  id              String            @id @db.Uuid
  displayName     String?           @map("display_name")
  onboarded       Boolean
  favoriteTeam    String?           @map("favorite_team")
  profileColour   String?           @map("profile_colour")
  profileImageUrl String?           @map("profile_image_url")
  referralCount   Int               @default(0) @map("referral_count")
  coinBalance     Decimal           @default(0) @db.Decimal(18, 4)
  userId          String            @unique @map("user_id") @db.Uuid
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  settings        Json              @default("{}")
  gamesSummary    Json              @default("{}")
  metadata        Json              @default("{}")
  user            User              @relation(fields: [userId], references: [id])
  chatUserRooms   RoomChatUser[]
  MatchPrediction MatchPrediction[]

  @@map("user_profiles")
}

enum TokenType {
  email_verify
  password_reset
}

model Token {
  id        String    @id @db.Uuid
  type      TokenType
  expiresAt DateTime  @map("expires_at")
  userId    String    @map("user_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model Room {
  id           String   @id @db.Uuid
  name         String   @db.VarChar(100)
  description  String?
  roomType     String   @default("public") @map("room_type")
  roomImageUrl String?  @map("room_image_url")
  joiningFee   Int      @default(0) @map("joining_fee")
  createdById  String   @map("created_by_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  metadata     Json     @default("{}")

  roomChatUsers RoomChatUser[]
  RoomGames     RoomGame[]

  @@map("rooms")
}

model RoomChatUser {
  roomId    String      @map("room_id") @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  role      String
  rooom     Room        @relation(fields: [roomId], references: [id])
  chatUser  UserProfile @relation(fields: [userId], references: [userId])
  createdAt DateTime?   @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")

  @@unique([roomId, userId], map: "room_id_user_id_unique")
  @@map("rooms_chat_users")
}

enum Sport {
  football
  basketball
  baseball
  cricket
  american_football
  f1
  nascar
  running
}

model League {
  id          Int          @id @default(autoincrement())
  name        String
  logo        String
  sport       Sport
  country     String       @db.VarChar(30)
  season      String
  sources     Json         @default("{}")
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")
  leagueTeams TeamLeague[]
  matches     Match[]

  @@map("leagues")
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  code        String
  logo        String
  sport       Sport
  sources     Json         @default("{}")
  createdAt   DateTime?    @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")
  teamLeagues TeamLeague[]

  teamMatches  MatchTeam[]
  teamAthletes TeamAthlete[]
  @@map("teams")
}

model TeamLeague {
  teamId    Int       @map("team_id")
  leagueId  Int       @map("league_id")
  team      Team      @relation(fields: [teamId], references: [id])
  league    League    @relation(fields: [leagueId], references: [id])
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([teamId, leagueId], map: "team_id_league_id_unique")
  @@map("teams_leagues")
}

model Athlete {
  id           Int           @id @default(autoincrement())
  name         String
  firstname    String
  lastname     String
  nationality  String?
  photo        String?
  sources      Json          @default("{}")
  createdAt    DateTime?     @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  athleteTeams TeamAthlete[]

  @@map("athletes")
}

model TeamAthlete {
  teamId    Int       @map("team_id")
  athleteId Int       @map("athlete_id")
  team      Team      @relation(fields: [teamId], references: [id])
  athlete   Athlete   @relation(fields: [athleteId], references: [id])
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([teamId, athleteId], map: "team_id_athlete_id_unique")
  @@map("teams_athletes")
}

enum MatchStatus {
  scheduled
  in_progress
  suspended
  cancelled
  completed
}

model Match {
  id        String      @id @db.Uuid
  sport     Sport
  status    MatchStatus
  dateTime  DateTime
  periods   Json        @default("{}")
  season    String
  leagueId  Int         @map("league_id")
  venue     String
  winner    String?
  summary   Json        @default("{}")
  sources   Json        @default("{}")
  questions Json        @default("[]")
  metadata  Json        @default("{}")
  createdAt DateTime?   @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  league    League      @relation(fields: [leagueId], references: [id])

  matchTeams       MatchTeam[]
  matchPredictions MatchPrediction[]

  @@map("matches")
}

model MatchTeam {
  teamId    Int       @map("team_id")
  matchId   String    @map("match_id") @db.Uuid
  team      Team      @relation(fields: [teamId], references: [id])
  match     Match     @relation(fields: [matchId], references: [id])
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([teamId, matchId], map: "team_id_match_id_unique")
  @@map("matches_teams")
}

model MatchPrediction {
  id          String    @id @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  matchId     String    @map("match_id") @db.Uuid
  points      Int
  predictions Json      @default("[]")
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  match  Match       @relation(fields: [matchId], references: [id])
  player UserProfile @relation(fields: [userId], references: [userId])

  @@map("user_match_predictions")
}

enum RoomGameType {
  weekly
  season
}

enum RoomGameStatus {
  in_progress
  completed
}

model RoomGame {
  id          String         @id @db.Uuid
  name        String
  description String?
  roomId      String         @map("room_id") @db.Uuid
  type        RoomGameType
  status      RoomGameStatus
  summary     Json           @default("{}")
  createdAt   DateTime?      @default(now()) @map("created_at")
  expiringAt  DateTime       @map("expiring_at")
  updatedAt   DateTime?      @updatedAt @map("updated_at")

  room Room @relation(fields: [roomId], references: [id])

  @@map("room_games")
}
