// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id              String            @id @db.Uuid
  name            String            @unique
  description     String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  rolePermissions RolePermissions[]
  roleUsers       UserRoles[]

  @@map("roles")
}

enum AccessMode {
  create
  read
  update
  delete
  edit
}

model RolePermissions {
  role_id       String     @db.Uuid
  permission_id String     @db.Uuid
  role          Role       @relation(fields: [role_id], references: [id])
  permission    Permission @relation(fields: [permission_id], references: [id])
  createdAt     DateTime?  @default(now()) @map("created_at")
  updatedAt     DateTime?  @updatedAt @map("updated_at")

  @@unique([role_id, permission_id], map: "role_id_permission_id_unique")
  @@map("roles_permissions")
}

model Permission {
  id              String            @id @db.Uuid
  accessMode      AccessMode        @map("access_mode")
  description     String
  resource        String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  permissionRoles RolePermissions[]

  @@map("permissions")
}

enum UserState {
  active
  inactive
  deleted
}

model User {
  id            String       @id @db.Uuid
  email         String?      @unique
  username      String?      @unique
  phone         String?      @unique
  firstname     String?
  lastname      String?
  country       String?
  referrer      String?      @db.Uuid
  referralCode  String       @unique @map("referral_code")
  passwordHash  String       @map("password_hash")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  lastLoginIp   String?      @map("last_login_ip") @db.Inet
  lastLoginTime DateTime?    @map("last_login_time")
  userState     UserState    @default(active) @map("user_state")
  profile       UserProfile?
  tokens        Token[]
  userRoles     UserRoles[]
  metadata      Json         @default("{}")

  @@map("users")
}

model UserRoles {
  role_id   String    @db.Uuid
  user_id   String    @db.Uuid
  role      Role      @relation(fields: [role_id], references: [id])
  user      User      @relation(fields: [user_id], references: [id])
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([role_id, user_id], map: "role_id_user_id_unique")
  @@map("users_roles")
}

model UserProfile {
  id              String          @id @db.Uuid
  displayName     String?         @map("display_name")
  onboarded       Boolean
  favoriteTeam    String?         @map("favorite_team")
  profileColour   String?         @map("profile_colour")
  profileImageUrl String?         @map("profile_image_url")
  referralCount   Int             @default(0) @map("referral_count")
  coinBalance     Decimal         @default(0) @db.Decimal(18, 4)
  userId          String          @unique @map("user_id") @db.Uuid
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  settings        Json            @default("{}")
  gamesSummary    Json            @default("{}")
  metadata        Json            @default("{}")
  user            User            @relation(fields: [userId], references: [id])
  chatUserRooms   RoomChatUsers[]

  @@map("user_profiles")
}

enum TokenType {
  email_verify
  password_reset
}

model Token {
  id        String    @id @db.Uuid
  type      TokenType
  expiresAt DateTime  @map("expires_at")
  userId    String    @map("user_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model Room {
  id           String   @id @db.Uuid
  name         String
  description  String?
  roomType     String   @default("public") @map("room_type")
  roomImageUrl String?  @map("room_image_url")
  joiningFee   Int      @default(0) @map("joining_fee")
  createdById  String   @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  metadata     Json     @default("{}")

  roomChatUsers RoomChatUsers[]

  @@map("rooms")
}

model RoomChatUsers {
  room_id         String      @db.Uuid
  user_profile_id String      @db.Uuid
  role            String
  rooom           Room        @relation(fields: [room_id], references: [id])
  chatUser        UserProfile @relation(fields: [user_profile_id], references: [id])
  createdAt       DateTime?   @default(now()) @map("created_at")
  updatedAt       DateTime?   @updatedAt @map("updated_at")

  @@unique([room_id, user_profile_id], map: "room_id_user_profile_id_unique")
  @@map("rooms_chat_users")
}

// model Game {
//   roomId
//   type

//   @@map("games")
// }
